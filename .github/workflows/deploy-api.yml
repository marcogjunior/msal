name: Deploy API (.NET) to App Service (AFD Private Link)

on:
  push:
    branches: [ master, main ]
    paths:
      - 'api/**'
      - '.github/workflows/deploy-api.yml'
  pull_request_review:
    types: [submitted]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy-api:
    if: >
      (github.event_name == 'pull_request_review' && github.event.review.state == 'approved')
      || (github.event_name == 'push')
      || (github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest

    env:
      AZURE_RG: ${{ vars.AZURE_RG }}
      WEBAPP_NAME: ${{ vars.WEBAPP_NAME }}
      AFD_PROFILE: ${{ vars.AFD_PROFILE }}
      AFD_ENDPOINT: ${{ vars.AFD_ENDPOINT }}
      DEPLOY_SA_NAME: ${{ vars.DEPLOY_SA_NAME }}
      

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Login to Azure (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Resolve Storage Account name
        id: sa
        run: |
          if [ -n "${DEPLOY_SA_NAME:-}" ]; then
            echo "name=$DEPLOY_SA_NAME" >> "$GITHUB_OUTPUT"
          elif [ -n "${DEPLOY_SA_NAME:-}" ]; then
            echo "name=$DEPLOY_SA_NAME" >> "$GITHUB_OUTPUT"
          else
            echo "ERROR: Set repo variable DEPLOY_SA_NAME or DEPLOY_SA_NAME." >&2
            exit 1
          fi

      # NEW: export for Azure CLI auto-detection
      - name: Export AZURE_STORAGE_ACCOUNT
        run: |
          echo "AZURE_STORAGE_ACCOUNT=${{ steps.sa.outputs.name }}" >> $GITHUB_ENV
          echo "Using SA: ${{ steps.sa.outputs.name }}"
          az storage account show -n "${{ steps.sa.outputs.name }}" -g "$AZURE_RG" -o table

      - name: Show Azure context (debug)
        run: |
          az account show
          az group show -n "$AZURE_RG"
          az webapp show -g "$AZURE_RG" -n "$WEBAPP_NAME"

      - name: Build & Publish (.NET)
        run: |
          set -e
          dotnet restore ./api/*.csproj
          dotnet publish ./api/*.csproj -c Release -o "$RUNNER_TEMP/api-publish"
          ls -la "$RUNNER_TEMP/api-publish"

      - name: Package artifact (zip)
        run: |
          cd "$RUNNER_TEMP/api-publish"
          zip -r "$RUNNER_TEMP/api.zip" .
          ls -lh "$RUNNER_TEMP/api.zip"

      - name: Ensure 'deploy' container exists (private)
        run: |
          az storage container create \
            --name deploy \
            --auth-mode login \
            --public-access off

      - name: Upload package to Blob
        id: up
        run: |
          NAME="api-$(date +%s).zip"
          az storage blob upload \
            --container-name deploy \
            --name "$NAME" \
            --file "$RUNNER_TEMP/api.zip" \
            --overwrite \
            --auth-mode login
          echo "name=$NAME" >> "$GITHUB_OUTPUT"

      # CHANGED: add --auth-mode login + --as-user + rely on AZURE_STORAGE_ACCOUNT
      - name: Generate short-lived user SAS (UDS)
        id: sas
        run: |
          EXPIRES=$(date -u -d '60 minutes' +%Y-%m-%dT%H:%MZ)
          URL=$(az storage blob generate-sas \
            --container-name deploy \
            --name "${{ steps.up.outputs.name }}" \
            --permissions r \
            --expiry "$EXPIRES" \
            --https-only \
            --as-user \
            --auth-mode login \
            --full-uri -o tsv)
          echo "url=${URL}" >> "$GITHUB_OUTPUT"

      - name: Configure WEBSITE_RUN_FROM_PACKAGE
        run: |
          az webapp config appsettings set \
            --resource-group "$AZURE_RG" \
            --name "$WEBAPP_NAME" \
            --settings WEBSITE_RUN_FROM_PACKAGE="${{ steps.sas.outputs.url }}"

      - name: Restart app
        run: az webapp restart -g "$AZURE_RG" -n "$WEBAPP_NAME"

      - name: Purge AFD endpoint cache
        if: ${{ env.AFD_PROFILE != '' && env.AFD_ENDPOINT != '' }}
        run: |
          az afd endpoint purge \
            --resource-group "$AZURE_RG" \
            --profile-name "$AFD_PROFILE" \
            --endpoint-name "$AFD_ENDPOINT" \
            --content-paths "/*"
