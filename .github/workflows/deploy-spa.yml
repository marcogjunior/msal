name: Deploy SPA (Angular) to Static Website + Purge AFD

on:
  push:
    branches: [ master, main ]
    paths:
      - 'spa/**'
      - '.github/workflows/deploy-spa.yml'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: deploy-spa-${{ github.ref }}
  cancel-in-progress: false

env:
  AZURE_RG: ${{ vars.AZURE_RG }}
  # Set ONE of these in repo Variables (Settings → Variables → Actions)
  DEPLOY_SA_NAME: ${{ vars.DEPLOY_SA_NAME }}
  AFD_PROFILE: ${{ vars.AFD_PROFILE }}
  AFD_ENDPOINT: ${{ vars.AFD_ENDPOINT }}

jobs:
  deploy-spa:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # 0) Find the SPA root under spa/** (prefer angular.json, fallback to package.json)
      - name: Detect SPA root
        id: root
        run: |
          set -e
          FILE=$(git ls-files 'spa/**/angular.json' | head -n1)
          if [ -z "$FILE" ]; then
            FILE=$(git ls-files 'spa/**/package.json' | head -n1)
          fi
          if [ -z "$FILE" ]; then
            echo "No Angular project found under spa/**"; exit 1
          fi
          DIR=$(dirname "$FILE")
          echo "dir=$DIR" >> "$GITHUB_OUTPUT"
          echo "Found SPA root: $DIR"

      # 1) Detect package manager + lockfile in that root
      - name: Detect package manager
        id: pm
        run: |
          set -e
          ROOT="${{ steps.root.outputs.dir }}"
          if [ -f "$ROOT/pnpm-lock.yaml" ]; then
            echo "pm=pnpm"  >> "$GITHUB_OUTPUT"
            echo "lock=$ROOT/pnpm-lock.yaml"  >> "$GITHUB_OUTPUT"
          elif [ -f "$ROOT/package-lock.json" ]; then
            echo "pm=npm"   >> "$GITHUB_OUTPUT"
            echo "lock=$ROOT/package-lock.json"  >> "$GITHUB_OUTPUT"
          elif [ -f "$ROOT/yarn.lock" ]; then
            echo "pm=yarn"  >> "$GITHUB_OUTPUT"
            echo "lock=$ROOT/yarn.lock"  >> "$GITHUB_OUTPUT"
          else
            echo "pm=npm"   >> "$GITHUB_OUTPUT"
            echo "lock="    >> "$GITHUB_OUTPUT"
          fi
          echo "PM:   $(grep pm= $GITHUB_OUTPUT | cut -d= -f2)"
          echo "Lock: $(grep lock= $GITHUB_OUTPUT | cut -d= -f2)"

      # 2) Install Node (always), enable cache only if lockfile exists
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Enable dependency cache
        if: ${{ steps.pm.outputs.lock != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ steps.pm.outputs.pm }}
          cache-dependency-path: ${{ steps.pm.outputs.lock }}

      # 3) Azure login
      - name: Login to Azure (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # 4) Resolve Storage Account and export for CLI
      - name: Resolve Storage Account name
        id: sa
        run: |
          if [ -n "${DEPLOY_SA_NAME:-}" ]; then
            echo "name=$DEPLOY_SA_NAME" >> "$GITHUB_OUTPUT"
          elif [ -n "${DEPLOY_SA_NAME:-}" ]; then
            echo "name=$DEPLOY_SA_NAME" >> "$GITHUB_OUTPUT"
          else
            echo "ERROR: Set repo variable DEPLOY_SA_NAME or DEPLOY_SA_NAME." >&2
            exit 1
          fi

      - name: Export AZURE_STORAGE_ACCOUNT for CLI
        run: |
          echo "AZURE_STORAGE_ACCOUNT=${{ steps.sa.outputs.name }}" >> $GITHUB_ENV
          az storage account show -n "${{ steps.sa.outputs.name }}" -g "$AZURE_RG" -o table

      # 5) Install & Build Angular from detected root
      - name: Install & Build Angular
        working-directory: ${{ steps.root.outputs.dir }}
        env:
          PM: ${{ steps.pm.outputs.pm }}
        run: |
          set -e
          corepack enable || true
          if [ "$PM" = "pnpm" ]; then
            pnpm i --frozen-lockfile
            pnpm build || npx ng build --configuration production
          elif [ "$PM" = "yarn" ]; then
            yarn install --frozen-lockfile
            yarn build || npx ng build --configuration production
          else
            npm ci
            npm run build --if-present || npx ng build --configuration production
          fi

      # 6) Find the built dist path (looks for first index.html under dist)
      - name: Detect Angular output path
        id: outpath
        run: |
          set -e
          ROOT="${{ steps.root.outputs.dir }}"
          FILE=$(find "$ROOT/dist" -type f -name index.html | head -n1 || true)
          if [ -z "$FILE" ]; then
            echo "Build output not found under $ROOT/dist"; ls -R "$ROOT" || true; exit 1
          fi
          DIR=$(dirname "$FILE")
          echo "path=$DIR" >> "$GITHUB_OUTPUT"
          echo "Publish from: $DIR"

      # 7) Ensure Static Website is enabled
      - name: Enable Static Website (index + 404 → index.html)
        run: |
          az storage blob service-properties update \
            --static-website \
            --index-document index.html \
            --404-document index.html

      # 8) Upload build to $web
      - name: Upload to Static Website ($web)
        run: |
          az storage blob upload-batch \
            -s "${{ steps.outpath.outputs.path }}" \
            -d '$web' \
            --overwrite \
            --auth-mode login

      # 9) Prevent stale SPA shell
      - name: Set no-cache for index.html
        run: |
          az storage blob update \
            --container-name '$web' \
            --name 'index.html' \
            --content-cache-control 'no-cache, no-store, must-revalidate' \
            --auth-mode login || true

      # 10) Purge AFD
      - name: Purge AFD endpoint cache
        if: ${{ env.AFD_PROFILE != '' && env.AFD_ENDPOINT != '' }}
        run: |
          az afd endpoint purge \
            --resource-group "$AZURE_RG" \
            --profile-name "$AFD_PROFILE" \
            --endpoint-name "$AFD_ENDPOINT" \
            --content-paths "/*"
