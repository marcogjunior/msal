name: Deploy SPA (Angular) to Static Website + Purge AFD

on:
  push:
    branches: [ master, main ]
    paths:
      - 'spa/**'
      - '.github/workflows/deploy-spa.yml'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: deploy-spa-${{ github.ref }}
  cancel-in-progress: false

env:
  # === Infra vars (set these as repo Variables) ===
  AZURE_RG: ${{ vars.AZURE_RG }}
  AFD_PROFILE: ${{ vars.AFD_PROFILE }}
  AFD_ENDPOINT: ${{ vars.AFD_ENDPOINT }}
  # Use ONE of these for the Storage Account name:
  DEPLOY_SA_NAME: ${{ vars.DEPLOY_SA_NAME }}
  
  # === Your SPA root (based on your screenshot) ===
  SPA_ROOT: spa/scaffold

jobs:
  deploy-spa:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Quick sanity (helps if paths are wrong)
      - name: Show repo tree (top levels)
        run: |
          echo "PWD: $(pwd)"
          find . -maxdepth 3 -type d -print | sed 's|^\./||' | head -n 200

      # Detect package manager at SPA_ROOT
      - name: Detect package manager
        id: pm
        shell: bash
        run: |
          set -e
          ROOT="${SPA_ROOT}"
          if [ ! -d "$ROOT" ]; then
            echo "ERROR: SPA_ROOT '$ROOT' not found." >&2; exit 1
          fi
          if [ -f "$ROOT/pnpm-lock.yaml" ]; then
            echo "pm=pnpm"  >> "$GITHUB_OUTPUT"; echo "lock=$ROOT/pnpm-lock.yaml"  >> "$GITHUB_OUTPUT"
          elif [ -f "$ROOT/package-lock.json" ]; then
            echo "pm=npm"   >> "$GITHUB_OUTPUT"; echo "lock=$ROOT/package-lock.json"  >> "$GITHUB_OUTPUT"
          elif [ -f "$ROOT/yarn.lock" ]; then
            echo "pm=yarn"  >> "$GITHUB_OUTPUT"; echo "lock=$ROOT/yarn.lock"  >> "$GITHUB_OUTPUT"
          else
            echo "pm=npm"   >> "$GITHUB_OUTPUT"; echo "lock=" >> "$GITHUB_OUTPUT"
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Enable dependency cache
        if: ${{ steps.pm.outputs.lock != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ steps.pm.outputs.pm }}
          cache-dependency-path: ${{ steps.pm.outputs.lock }}

      - name: Login to Azure (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Resolve Storage Account name and export for CLI
      - name: Resolve Storage Account name
        id: sa
        shell: bash
        run: |
          if [ -n "${DEPLOY_SA_NAME:-}" ]; then
            echo "name=$DEPLOY_SA_NAME" >> "$GITHUB_OUTPUT"
          elif [ -n "${DEPLOY_SA_NAME:-}" ]; then
            echo "name=$DEPLOY_SA_NAME" >> "$GITHUB_OUTPUT"
          else
            echo "ERROR: Set repo variable DEPLOY_SA_NAME or DEPLOY_SA_NAME." >&2; exit 1
          fi

      - name: Export AZURE_STORAGE_ACCOUNT for CLI
        run: |
          echo "AZURE_STORAGE_ACCOUNT=${{ steps.sa.outputs.name }}" >> $GITHUB_ENV
          az storage account show -n "${{ steps.sa.outputs.name }}" -g "$AZURE_RG" -o table

      # Build from spa/scaffold (works with/without global Angular CLI)
      - name: Install & Build Angular
        working-directory: ${{ env.SPA_ROOT }}
        env:
          PM: ${{ steps.pm.outputs.pm }}
          LOCK: ${{ steps.pm.outputs.lock }}
        shell: bash
        run: |
          set -e
          corepack enable || true

          if [ "$PM" = "pnpm" ]; then
            if [ -n "$LOCK" ]; then pnpm i --frozen-lockfile; else pnpm i; fi
            pnpm build || npx -y @angular/cli@latest ng build --configuration production

          elif [ "$PM" = "yarn" ]; then
            if [ -n "$LOCK" ]; then yarn install --frozen-lockfile; else yarn install; fi
            yarn build || npx -y @angular/cli@latest ng build --configuration production

          else  # npm
            if [ -n "$LOCK" ]; then npm ci; else npm install; fi
            npm run build --if-present || npx -y @angular/cli@latest ng build --configuration production
          fi

              working-directory: ${{ env.SPA_ROOT }}
              env:
                PM: ${{ steps.pm.outputs.pm }}
              shell: bash
              run: |
                set -e
                corepack enable || true
                if [ "$PM" = "pnpm" ]; then
                  pnpm i --frozen-lockfile
                  pnpm build || npx -y @angular/cli@latest ng build --configuration production
                elif [ "$PM" = "yarn" ]; then
                  yarn install --frozen-lockfile
                  yarn build || npx -y @angular/cli@latest ng build --configuration production
                else
                  npm ci
                  npm run build --if-present || npx -y @angular/cli@latest ng build --configuration production
                fi

            # Find dist/**/index.html under spa/scaffold
      - name: Detect Angular output path
        id: outpath
        shell: bash
        run: |
          set -e
          ROOT="${SPA_ROOT}"
          FILE=$(find "$ROOT/dist" -type f -name index.html | head -n1 || true)
          if [ -z "$FILE" ]; then
            echo "Build output not found under $ROOT/dist"; ls -R "$ROOT" || true; exit 1
          fi
          DIR=$(dirname "$FILE")
          echo "path=$DIR" >> "$GITHUB_OUTPUT"
          echo "Will publish from: $DIR"

      - name: Enable Static Website (index + 404 â†’ index.html)
        run: |
          az storage blob service-properties update \
            --static-website \
            --index-document index.html \
            --404-document index.html

      - name: Upload to Static Website ($web)
        run: |
          az storage blob upload-batch \
            -s "${{ steps.outpath.outputs.path }}" \
            -d '$web' \
            --overwrite \
            --auth-mode login

      - name: Set no-cache for index.html
        run: |
          az storage blob update \
            --container-name '$web' \
            --name 'index.html' \
            --content-cache-control 'no-cache, no-store, must-revalidate' \
            --auth-mode login || true

      - name: Purge AFD endpoint cache
        if: ${{ env.AFD_PROFILE != '' && env.AFD_ENDPOINT != '' }}
        run: |
          az afd endpoint purge \
            --resource-group "$AZURE_RG" \
            --profile-name "$AFD_PROFILE" \
            --endpoint-name "$AFD_ENDPOINT" \
            --content-paths "/*"
