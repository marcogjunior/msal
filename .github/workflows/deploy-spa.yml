name: Deploy SPA (Angular) to Static Website + Purge AFD

on:
  push:
    branches: [ master, main ]
    # widen a bit so pushes that touch SPA files trigger the job
    paths:
      - 'spa/**'
      - '**/angular.json'
      - '**/package.json'
      - '.github/workflows/deploy-spa.yml'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: deploy-spa-${{ github.ref }}
  cancel-in-progress: false

env:
  AZURE_RG: ${{ vars.AZURE_RG }}
  # Optional override: repo variable with the folder that contains package.json
  SPA_ROOT: spa/scaffold
  # One of these must be set in repo Variables
  DEPLOY_SA_NAME: ${{ vars.DEPLOY_SA_NAME }}

  AFD_PROFILE: ${{ vars.AFD_PROFILE }}
  AFD_ENDPOINT: ${{ vars.AFD_ENDPOINT }}

jobs:
  deploy-spa:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # 0) Locate SPA root (folder that has package.json). SPA_ROOT var wins.
      - name: Detect SPA root
        id: root
        shell: bash
        run: |
          set -e
          pick_first() { for p in "$@"; do [ -n "$p" ] && [ -d "$p" ] && echo "$p" && return 0; done; return 1; }

          if [ -n "${SPA_ROOT:-}" ] && [ -f "${SPA_ROOT%/}/package.json" ]; then
            echo "dir=${SPA_ROOT%/}" >> "$GITHUB_OUTPUT"; exit 0
          fi

          # prefer under spa/** if present
          CAND=$(git ls-files "spa/**/package.json" | head -n1 | xargs -r dirname)
          if [ -z "$CAND" ]; then
            CAND=$(git ls-files "**/package.json" | head -n1 | xargs -r dirname)
          fi

          if [ -z "$CAND" ]; then
            echo "Repo tree (top 3 levels):"; find . -maxdepth 3 -type d | sed 's|^\./||' | sort | head -n 200
            echo "ERROR: Could not find any package.json. Set SPA_ROOT to your SPA folder." >&2
            exit 1
          fi

          echo "dir=$CAND" >> "$GITHUB_OUTPUT"
          echo "Found SPA root: $CAND"

      # 1) Detect package manager + lockfile in that root
      - name: Detect package manager
        id: pm
        shell: bash
        run: |
          set -e
          ROOT="${{ steps.root.outputs.dir }}"
          if [ -f "$ROOT/pnpm-lock.yaml" ]; then
            echo "pm=pnpm"  >> "$GITHUB_OUTPUT"; echo "lock=$ROOT/pnpm-lock.yaml"  >> "$GITHUB_OUTPUT"
          elif [ -f "$ROOT/package-lock.json" ]; then
            echo "pm=npm"   >> "$GITHUB_OUTPUT"; echo "lock=$ROOT/package-lock.json"  >> "$GITHUB_OUTPUT"
          elif [ -f "$ROOT/yarn.lock" ]; then
            echo "pm=yarn"  >> "$GITHUB_OUTPUT"; echo "lock=$ROOT/yarn.lock"  >> "$GITHUB_OUTPUT"
          else
            echo "pm=npm"   >> "$GITHUB_OUTPUT"; echo "lock=" >> "$GITHUB_OUTPUT"
          fi

      # 2) Node setup (cache only if lockfile exists)
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Enable dependency cache
        if: ${{ steps.pm.outputs.lock != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ steps.pm.outputs.pm }}
          cache-dependency-path: ${{ steps.pm.outputs.lock }}

      # 3) Azure login
      - name: Login to Azure (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # 4) Resolve Storage Account and export for CLI
      - name: Resolve Storage Account name
        id: sa
        shell: bash
        run: |
          if [ -n "${DEPLOY_SA_NAME:-}" ]; then
            echo "name=$DEPLOY_SA_NAME" >> "$GITHUB_OUTPUT"
          elif [ -n "${STORAGE_ACCOUNT_NAME:-}" ]; then
            echo "name=$STORAGE_ACCOUNT_NAME" >> "$GITHUB_OUTPUT"
          else
            echo "ERROR: Set repo variable DEPLOY_SA_NAME or STORAGE_ACCOUNT_NAME." >&2
            exit 1
          fi

      - name: Export AZURE_STORAGE_ACCOUNT for CLI
        shell: bash
        run: |
          echo "AZURE_STORAGE_ACCOUNT=${{ steps.sa.outputs.name }}" >> $GITHUB_ENV
          az storage account show -n "${{ steps.sa.outputs.name }}" -g "$AZURE_RG" -o table


      # 5) Install & Build Angular from detected root (tenta ci -> fallback install)
      - name: Install & Build Angular
        working-directory: ${{ steps.root.outputs.dir }}
        shell: bash
        run: |
          set -e
          npm config set fund false
          npm config set audit false

          if [ -f package-lock.json ]; then
            echo "Trying npm ci (lockfile present)..."
            npm ci || (echo "npm ci failed due to lock mismatch → regenerating lock" && rm -f package-lock.json && npm install)
          else
            echo "No lockfile → npm install"
            npm install
          fi

          # usa o CLI local se existir; senão, pega o major do package.json (padrão 18)
          if npx --no-install ng version >/dev/null 2>&1; then
            npx --no-install ng build --configuration production
          else
            MAJOR=$(node -e "try{const p=require('./package.json');let v=(p.devDependencies&&p.devDependencies['@angular/cli'])||(p.dependencies&&p.dependencies['@angular/cli'])||'';if(!v){process.stdout.write('18');}else{const m=v.match(/\\d+/);process.stdout.write(m?m[0]:'18');}}catch{process.stdout.write('18');}")
            npx -y @angular/cli@${MAJOR} ng build --configuration production
          fi


      # 6) Detect dist output (first index.html)
      - name: Detect Angular output path
        id: outpath
        shell: bash
        run: |
          set -e
          ROOT="${{ steps.root.outputs.dir }}"
          FILE=$(find "$ROOT/dist" -type f -name index.html | head -n1 || true)
          if [ -z "$FILE" ]; then
            echo "Build output not found under $ROOT/dist"; ls -R "$ROOT" || true; exit 1
          fi
          DIR=$(dirname "$FILE")
          echo "path=$DIR" >> "$GITHUB_OUTPUT"
          echo "Publish from: $DIR"

      # 7) Enable Static Website
      - name: Enable Static Website (index + 404 → index.html)
        run: |
          az storage blob service-properties update \
            --static-website \
            --index-document index.html \
            --404-document index.html

      # 8) Upload to $web
      - name: Upload to Static Website ($web)
        run: |
          az storage blob upload-batch \
            -s "${{ steps.outpath.outputs.path }}" \
            -d '$web' \
            --overwrite \
            --auth-mode login

      # 9) Prevent stale SPA shell
      - name: Set no-cache for index.html
        run: |
          az storage blob update \
            --container-name '$web' \
            --name 'index.html' \
            --content-cache-control 'no-cache, no-store, must-revalidate' \
            --auth-mode login || true

      # 10) Purge AFD
      - name: Purge AFD endpoint cache
        if: ${{ env.AFD_PROFILE != '' && env.AFD_ENDPOINT != '' }}
        run: |
          az afd endpoint purge \
            --resource-group "$AZURE_RG" \
            --profile-name "$AFD_PROFILE" \
            --endpoint-name "$AFD_ENDPOINT" \
            --content-paths "/*"
